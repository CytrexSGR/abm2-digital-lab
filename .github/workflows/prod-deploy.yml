name: PROD Deploy â€“ Formula Registry

on:
  workflow_dispatch:
    inputs:
      pin_version:
        description: "Fallback pin for rollback (e.g., 1.0.0)"
        required: false
        default: "1.0.0"
      canary_agents:
        description: "Canary agents"
        required: false
        default: "50"
      canary_steps:
        description: "Canary steps"
        required: false
        default: "20"
  push:
    branches: [ main ]
    paths:
      - 'digital-lab/backend/**'
      - 'docker-compose.prod.yml'
      - 'scripts/**'

env:
  REGISTRY_IMAGE: ${{ secrets.REGISTRY_IMAGE }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        if: ${{ env.REGISTRY_IMAGE != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        if: ${{ env.REGISTRY_IMAGE != '' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: digital-lab/backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:${{ github.sha }}
            ${{ env.REGISTRY_IMAGE }}:latest

  preflight:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Preflight pins validation
        run: |
          bash scripts/prod_preflight.sh digital-lab/backend/config/pins.json

  deploy:
    runs-on: ubuntu-latest
    needs: preflight
    outputs:
      deploy_logs: ${{ steps.logs.outputs.path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy compose and configs to remote
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: |
            docker-compose.prod.yml
            scripts/*
            digital-lab/backend/config/*
          target: /opt/digital-lab/

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          REGISTRY_IMAGE: ${{ env.REGISTRY_IMAGE }}
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -euo pipefail
            cd /opt/digital-lab
            docker compose -f docker-compose.prod.yml pull || true
            docker compose -f docker-compose.prod.yml up -d
            # Wait for health
            for i in {1..30}; do curl -fsS http://127.0.0.1:8000/api/registry/health && break || sleep 2; done
            curl -fsS http://127.0.0.1:8000/api/registry/health | jq '.'

      - name: Save deploy logs path
        id: logs
        run: echo "path=deploy_logs.txt" >> $GITHUB_OUTPUT

  canary:
    runs-on: ubuntu-latest
    needs: deploy
    outputs:
      canary_ok: ${{ steps.check.outputs.ok }}
    steps:
      - name: Run canary on remote
        uses: appleboy/ssh-action@v1.0.3
        env:
          BACKEND_URL: http://127.0.0.1:8000
          CANARY_AGENTS: ${{ github.event.inputs.canary_agents || '50' }}
          CANARY_STEPS: ${{ github.event.inputs.canary_steps || '20' }}
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -euo pipefail
            export BACKEND_URL
            bash /opt/digital-lab/scripts/prod_canary.sh
            # RBAC negative probe
            CODE=$(curl -s -o /dev/null -w "%{http_code}" -X PUT $BACKEND_URL/api/pins -H 'Content-Type: application/json' -d '{"pins":{"altruism_update":"1.0.0"}}')
            echo "RBAC no-role PUT /pins code=$CODE"; [ "$CODE" = "403" ]
            curl -fsS $BACKEND_URL/metrics | grep -E 'registry_eval_ms_total|registry_batch_calls'

      - name: Copy canary report
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: /opt/digital-lab/runs/prod_canary_report.json
          target: runs/

      - name: Check canary thresholds
        id: check
        run: |
          python - << 'PY'
import json,sys
rep=json.load(open('runs/prod_canary_report.json'))
over=rep.get('overhead_ratio',0.0)
tele=rep.get('final',{}).get('telemetry', {})
batch_calls=tele.get('batch_calls',0)
ok = over <= 0.10 and batch_calls >= int(${ { github.event.inputs.canary_steps || '20' }})
print('ok=', ok)
open(os.environ.get('GITHUB_OUTPUT'),'a').write(f"ok={'true' if ok else 'false'}\n")
PY

      - name: Upload canary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prod-canary-artifacts
          path: |
            runs/prod_canary_report.json

  rollback_if_needed:
    runs-on: ubuntu-latest
    needs: canary
    if: needs.canary.outputs.canary_ok != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Rollback pins on remote
        uses: appleboy/ssh-action@v1.0.3
        env:
          BACKEND_URL: http://127.0.0.1:8000
          PIN: ${{ github.event.inputs.pin_version || '1.0.0' }}
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -euo pipefail
            bash /opt/digital-lab/scripts/prod_rollback.sh altruism_update@${PIN}
      - name: Fail pipeline after rollback
        run: |
          echo "Canary failed, rollback executed." && exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [canary, rollback_if_needed]
    if: always()
    steps:
      - name: Prepare message
        id: prep
        run: |
          STATUS=${{ needs.canary.outputs.canary_ok == 'true' && 'SUCCESS' || 'FAILURE' }}
          echo "status=$STATUS" >> $GITHUB_OUTPUT
      - name: Slack notify
        if: ${{ env.SLACK_WEBHOOK != '' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "PROD Deploy ${{ steps.prep.outputs.status }} for ${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

